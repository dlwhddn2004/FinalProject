<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xsi:schemaLocation="http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd">

	<!-- 
		프로퍼티스 파일 접근(SqlMapConfig.properties)
			context:property-placeholder
				 properties파일에 접근하는 경로는 같지만 해당 빈이 선언된 파정파일 내에서만 프로퍼티스 파일의 데이터가 활용 가능
				 EL표기법을 통해 프로퍼티스 파일의 키에 접근 ex) ${driver}
			
			util:properties - 애플리케이션 전역에서 프로퍼티스 파일의 데이터가 활용 가능
							     표기법 : #{util:properties 빈 등록시의 id 또는 name값['프로퍼티스 파일 내 키']}
							  ex) #{connectionInfo['driver']}
			
	 -->
<!-- 	 <context:property-placeholder location="classpath:kr/or/ddit/ibatis/config/SqlMapConfig.properties" -->
<!-- 	 								file-encoding="UTF-8"/> -->
	 								
<!-- 	 <util:properties id="connectionInfo"  -->
<!-- 	 location="classpath:kr/or/ddit/ibatis/config/SqlMapConfig.properties"></util:properties> -->

	<!-- 
		스프링 프레임웍 내 컨넥션 취득을 위한 가용한 DataSource
			1. SimpleDriverDataSource - 테스트용
			2. DriverManagerDataSource - DBCP, JNDI 배제되고 Simple 타입의 컨넥션 환경만 제공
			3. BasicDataSource -DBCP, JNDI, Simple 타입의 컨넥션 제공 환경(commons-pool-?.?.?.jar 활용)
	 -->
	 
<!-- 	 <bean id="dataSource" class="org.springframework.jdbc.datasource" -->
<!-- 	 	p:driver="${driver}" p:url="${url}" -->
<!-- 	 	p:username="${username}" p:password="${password}"></bean> -->

<!-- 	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource" -->
<!-- 		p:driverClassName="#{connectionInfo['driver']}" -->
<!-- 		p:url="#{connectionInfo['url']}" -->
<!-- 		p:username="#{connectionInfo['username']}" -->
<!-- 		p:password="#{connectionInfo['password']}"> -->
<!-- 	</bean>	 	 -->

	<!-- 	dbcp설정 -->
	<!-- 	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" -->
	<!-- 		p:driverClassName="#{connectionInfo['driver']}" -->
	<!-- 		p:url="#{connectionInfo['url']}" -->
	<!-- 		p:username="#{connectionInfo['username']}" -->
	<!-- 		p:password="#{connectionInfo['password']}"  -->
	<!-- 		p:initialSize="10" -->
	<!-- 		p:maxActive="6" -->
	<!-- 		p:maxWait="-1" -->
	<!-- 		p:maxIdle="6" -->
	<!-- 		p:minIdle="3" -->
	<!-- 		p:removeAbandoned="true" -->
	<!-- 		p:removeAbandonedTimeout="5000"> -->
	<!-- 	</bean> -->


<!-- 	JNDI 접근 -->
	<jee:jndi-lookup id="dataSource" jndi-name="jdbc/ddit"></jee:jndi-lookup>
	<!-- 
		class SqlMapClientFactoryBean{
			private DataSource dataSource;
			
			public void setDataSource(DataSource dataSource){
				this.dataSource= dataSource;
			}
		}	
	 -->
	 
		<!-- 	 아이바티스의 트랜잭션 처리를 외부에 위임하고 넘김 -->
	<bean id="sqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean"
		p:dataSource-ref="dataSource"
		p:configLocation="classpath:kr/or/ddit/ibatis/config/SqlMapConfig.xml"
		p:useTransactionAwareDataSource="true"
		p:transactionConfigClass="com.ibatis.sqlmap.engine.transaction.external.ExternalTransactionConfig">
		<property name="transactionConfigProperties">
			<props>
				<prop key="DefaultAutoCommit">false</prop>
				<prop key="SetAutoCommitAllowed">true</prop>
			</props>
		</property>
	</bean>
	
		<!-- 	어디에 넘기냐? 바로 스프링! 그런다음 서블릿 컨텍스트가서 처리를 마무리해주자-->
	<bean id="transactionMGR" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		p:dataSource-ref="dataSource">
	</bean>
</beans>







